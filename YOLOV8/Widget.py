# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'd:\LabelImage\Widget.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QObject, pyqtSignal,pyqtSlot
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QImage,QPixmap,QCloseEvent
import os
from typing import Union
from ultralyticss import Ultralyticss


class Ui_YOLOV8(QtWidgets.QWidget):
    def setupUi(self, YOLOV8):
        self.Ultraly = Ultralyticss()
        YOLOV8.setObjectName("YOLOV8")
        YOLOV8.resize(696, 516)
        self.gridLayout_3 = QtWidgets.QGridLayout(YOLOV8)
        self.gridLayout_3.setObjectName("gridLayout_3")
        spacerItem = QtWidgets.QSpacerItem(41, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem, 0, 0, 1, 1)
        self.Buttons = QtWidgets.QWidget(YOLOV8)
        self.Buttons.setMinimumSize(QtCore.QSize(600, 50))
        self.Buttons.setMaximumSize(QtCore.QSize(200, 50))
        self.Buttons.setObjectName("Buttons")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.Buttons)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.Train = QtWidgets.QPushButton(self.Buttons)
        self.Train.setObjectName("Train")
        self.gridLayout_2.addWidget(self.Train, 0, 6, 1, 1)
        self.Models = QtWidgets.QComboBox(self.Buttons)
        self.Models.setMinimumSize(QtCore.QSize(150, 25))
        self.Models.setObjectName("Models")
        self.gridLayout_2.addWidget(self.Models, 0, 1, 1, 1)
        self.Detect = QtWidgets.QPushButton(self.Buttons)
        self.Detect.setObjectName("Detect")
        self.gridLayout_2.addWidget(self.Detect, 0, 4, 1, 1)
        self.pushButton = QtWidgets.QPushButton(self.Buttons)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout_2.addWidget(self.pushButton, 0, 3, 1, 1)
        self.Camera = QtWidgets.QToolButton(self.Buttons)
        self.Camera.setMinimumSize(QtCore.QSize(40, 25))
        self.Camera.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap('./Resource/Icon/Camera.png'), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.Camera.setIcon(icon)
        self.Camera.setCheckable(True)
        self.Camera.setObjectName("Camera")
        self.gridLayout_2.addWidget(self.Camera, 0, 0, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(self.Buttons)
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout_2.addWidget(self.pushButton_2, 0, 5, 1, 1)
        self.gridLayout_3.addWidget(self.Buttons, 0, 1, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(41, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem1, 0, 2, 1, 1)
        self.widget = QtWidgets.QWidget(YOLOV8)
        self.widget.setMinimumSize(QtCore.QSize(600, 400))
        self.widget.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.widget.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.widget.setObjectName("widget")
        self.gridLayout = QtWidgets.QGridLayout(self.widget)
        self.gridLayout.setObjectName("gridLayout")
        self.showwidget = QtWidgets.QLabel(self.widget)
        self.showwidget.setText("")
        self.showwidget.setObjectName("showwidget")
        self.gridLayout.addWidget(self.showwidget, 0, 0, 1, 1)
        self.gridLayout_3.addWidget(self.widget, 1, 0, 1, 3)
        self.Models_floder_Path = './Weights'
        self.Models_list = os.listdir(self.Models_floder_Path)
        self.Models.addItems(self.Models_list)
        self.Detect.clicked.connect(self.On_Detect_Click)
        self.Train.clicked.connect(slot=self.On_Train_click)
        self.Camera.clicked.connect(slot=self.On_Camera_click)
        self.Ultraly.VCsignal.connect(self._VideoCature)
        self.pushButton.clicked.connect(slot=self.On_Track_click)
        self.pushButton_2.clicked.connect(slot=self.On_Data_Click)
        YOLOV8.closeEvent = self.closeEvent

        self.retranslateUi(YOLOV8)
        QtCore.QMetaObject.connectSlotsByName(YOLOV8)

    def retranslateUi(self, YOLOV8):
        _translate = QtCore.QCoreApplication.translate
        YOLOV8.setWindowTitle(_translate("YOLOV8", "YOLOV8"))
        self.Train.setText(_translate("YOLOV8", "Train"))
        self.Detect.setText(_translate("YOLOV8", "Detect"))
        self.pushButton.setText(_translate("YOLOV8", "Track"))
        self.pushButton_2.setText(_translate("YOLOV8", "data"))
    
    def On_Detect_Click(self):
        self.Model_chosen = './Weights/'+self.Models.currentText()
        Options = QFileDialog.Options()
        Options |= QFileDialog.ReadOnly
        image_path, _ = QFileDialog.getOpenFileName(None, "Select Image File", "", "Image Files (*.jpg *.jpeg *.png *.bmp *.gif);;All Files (*)", options=Options)
        if image_path:
            pixmap = self.Ultraly.detect(self.Model_chosen,image_path)
            assert pixmap
            self.showwidget.setPixmap(pixmap)
            self.showwidget.setScaledContents(True)
    
    def _VideoCature(self,pixmap:QPixmap):
        self.showwidget.setPixmap(pixmap)
        self.showwidget.setScaledContents(True)
    
    def On_Camera_click(self):
        self.Model_chosen = './Weights/'+self.Models.currentText()
        if self.Camera.isChecked():
            self.Ultraly.VideoCapture(self.Model_chosen,0,30)
        else:
            self.Ultraly.VideoCapture_Stop()
            self.showwidget.clear()
    
    def On_Track_click(self):
        self.Model_chosen = './Weights/'+self.Models.currentText()
        options = QFileDialog.Options()
        options |= QFileDialog.ReadOnly
        file_dialog = QFileDialog()
        file_dialog.setFileMode(QFileDialog.ExistingFile)
        file_dialog.setNameFilter("Video Files (*.mp4 *.avi *.mkv);;All Files (*)")
        if file_dialog.exec_():
            selected_files = file_dialog.selectedFiles()
            if selected_files:
                video_file_path = selected_files[0]
        self.Ultraly.Track(self.Model_chosen,video_file_path,30)

    def closeEvent(self,event:QCloseEvent):
        result = QtWidgets.QMessageBox.question(self, "标题", "亲，你确定想关闭我?别后悔！！！'_'", QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No)
        if(result == QtWidgets.QMessageBox.Yes):
            self.Ultraly.DeletJpg()
            event.accept()
        else:
            event.ignore()
    def On_Data_Click(self):
        self.Ultraly.data()
    def On_Train_click(self):
        self.Model_chosen = './Weights/'+self.Models.currentText()
        options = QFileDialog.Options()
        options |= QFileDialog.ReadOnly
        file_path, _ = QFileDialog.getOpenFileName(None, "Select YAML File", "", "YAML Files (*.yaml);;All Files (*)", options=options)
        if file_path:
            result=self.Ultraly.trains( self.Model_chosen,file_path,100,640)
            if result is None:
                
                QtWidgets.QMessageBox.information(self,'通知','训练完成',QtWidgets.QMessageBox.Ok)
            else:
                QtWidgets.QMessageBox.warning(self,'警告','训练异常'+result,QtWidgets.QMessageBox.Ok)
        else:
            QtWidgets.QMessageBox.information(self,'通知','请选择yaml数据',QtWidgets.QMessageBox.Ok)